{"version":3,"sources":["utils/filterRecipes.ts","utils/getRecipeTypeOptions.ts","utils/mungeGoogleSheetsEntry.ts","utils/sortRecipes.ts","api.ts","components/Counter.tsx","components/Recipe.tsx","components/SearchFilter.tsx","components/App.tsx","index.tsx"],"names":["filterRecipes","recipes","filters","recipeType","recipeNameSearch","filter","recipe","booleans","push","type","name","toLowerCase","search","every","Boolean","getTypes","map","reduce","options","includes","getRecipeTypeOptions","currentValue","typesInRecipes","enabledTypes","sort","a","b","localeCompare","value","active","disabled","mungeGoogleSheetsEntry","entry","id","gsx$name","gsx$type","gsx$link","$t","link","sortRecipes","adapter","axios","create","baseURL","getRecipes","get","response","data","feed","Error","Counter","count","plural","role","aria-live","className","CardWrapper","styled","div","CardHeader","h2","CardLink","Button","Recipe","nameSearch","showType","Card","CardBody","data-testid","highlightClassName","searchWords","textToHighlight","aria-label","color","href","target","rel","ClearIconWrapper","span","SearchFilter","recipeTypeOptions","handleRecipeTypeChange","handleRecipeNameSearchChange","handleClear","selectedRecipeType","useState","typeDropdownIsOpen","setTypeDropdownIsOpen","InputGroup","InputGroupButtonDropdown","addonType","isOpen","toggle","DropdownToggle","outline","caret","DropdownMenu","DropdownItem","onClick","key","Input","placeholder","onChange","event","currentTarget","spellCheck","InputGroupAddon","aria-hidden","SearchFilterCounterWrapper","App","loading","setLoading","error","setError","setRecipes","setRecipeType","setRecipeNameSearch","filteredRecipes","useEffect","api","nextRecipes","fetchRecipes","Container","Row","Col","xs","size","offset","sm","md","lg","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ae008da.chunk.js","sourcesContent":["import { FiltersType, RecipesType } from '../types';\n\nconst filterRecipes = ({\n  recipes,\n  filters\n}: {\n  recipes: RecipesType;\n  filters: FiltersType;\n}): RecipesType => {\n  const { recipeType, recipeNameSearch } = filters;\n\n  return recipes.filter(recipe => {\n    const booleans = [];\n\n    if (recipeType) {\n      booleans.push(recipe.type === recipeType);\n    }\n\n    if (recipeNameSearch) {\n      booleans.push(\n        recipe.name.toLowerCase().search(recipeNameSearch.toLowerCase()) !== -1\n      );\n    }\n\n    return booleans.every(Boolean);\n  });\n};\n\nexport default filterRecipes;\n","import { FiltersType, RecipesType, RecipeTypeOptionsType } from '../types';\nimport filterRecipes from './filterRecipes';\n\nconst getTypes = (recipes: RecipesType): string[] =>\n  recipes\n    .map(({ type }) => type)\n    .reduce((options: string[], type) => {\n      if (!options.includes(type)) {\n        options.push(type);\n      }\n      return options;\n    }, []);\n\nconst getRecipeTypeOptions = ({\n  recipes,\n  filters,\n  currentValue\n}: {\n  recipes: RecipesType;\n  filters: FiltersType;\n  currentValue: string | null;\n}): RecipeTypeOptionsType => {\n  const typesInRecipes = getTypes(recipes);\n  const enabledTypes = getTypes(\n    filterRecipes({ recipes, filters: { ...filters, recipeType: null } })\n  );\n\n  return typesInRecipes\n    .sort((a, b) => a.localeCompare(b))\n    .map(value => ({\n      value,\n      active: value === currentValue,\n      disabled: !enabledTypes.includes(value)\n    }));\n};\n\nexport default getRecipeTypeOptions;\n","import { GoogleSheetsEntryType, RecipesType } from '../types';\n\nconst mungeGoogleSheetsEntry = (entry: GoogleSheetsEntryType): RecipesType =>\n  entry.map(({ gsx$name, gsx$type, gsx$link }, id) => ({\n    id,\n    name: gsx$name.$t,\n    type: gsx$type.$t,\n    link: gsx$link.$t\n  }));\n\nexport default mungeGoogleSheetsEntry;\n","import { RecipesType } from '../types';\n\nconst sortRecipes = (recipes: RecipesType): RecipesType =>\n  recipes.sort((a, b) => a.name.localeCompare(b.name));\n\nexport default sortRecipes;\n","import axios from 'axios';\nimport { RecipesType } from './types';\nimport { mungeGoogleSheetsEntry } from './utils';\n\nexport const adapter = axios.create({\n  baseURL: 'https://spreadsheets.google.com/feeds/'\n});\n\nexport default {\n  async getRecipes(): Promise<RecipesType> {\n    try {\n      const response = await adapter.get(\n        '/list/106-nwBqrxeCGMSY0ZOUAjRvlbL2b2xAJgPy67M_Btc8/od6/public/values?alt=json'\n      );\n      return mungeGoogleSheetsEntry(response.data.feed.entry);\n    } catch (e) {\n      throw new Error('Error fetching recipes');\n    }\n  }\n};\n","import React from 'react';\n\ninterface CounterProps {\n  count: number;\n}\n\nconst Counter: React.FC<CounterProps> = ({ count }) => {\n  const plural = count === 1 ? '' : 's';\n\n  return (\n    <small role=\"alert\" aria-live=\"polite\" className=\"text-muted font-italic\">\n      {count} recipe{plural}\n    </small>\n  );\n};\n\nexport default Counter;\n","import React from 'react';\nimport Highlighter from 'react-highlight-words';\nimport { Button, Card, CardBody } from 'reactstrap';\nimport styled from 'styled-components';\nimport { RecipeProps } from '../types';\n\nconst CardWrapper = styled.div`\n  margin-bottom: 12px;\n`;\n\nconst CardHeader = styled.h2`\n  font-size: 1.5rem;\n  margin-bottom: 12px;\n`;\n\nconst CardLink = styled(Button)`\n  @media (max-width: 576px) {\n    display: block;\n  }\n`;\n\nconst Recipe: React.FC<RecipeProps> = ({\n  name,\n  type,\n  link,\n  nameSearch,\n  showType\n}) => (\n  <CardWrapper>\n    <Card>\n      <CardBody>\n        <CardHeader>\n          <Highlighter\n            data-testid=\"recipe-name\"\n            highlightClassName=\"highlight-word-search\"\n            searchWords={[nameSearch || '']}\n            textToHighlight={name}\n          />\n          {showType && <small className=\"text-muted\"> ({type})</small>}\n        </CardHeader>\n        <CardLink\n          aria-label={`Recipe for ${name}`}\n          color=\"primary\"\n          href={link}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Recipe\n        </CardLink>\n      </CardBody>\n    </Card>\n  </CardWrapper>\n);\n\nexport default Recipe;\n","import React, { useState } from 'react';\nimport {\n  Button,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupButtonDropdown\n} from 'reactstrap';\nimport styled from 'styled-components';\nimport { SearchFilterProps } from '../types';\n\nconst ClearIconWrapper = styled.span`\n  float: right;\n  font-size: 1.5rem;\n  font-weight: 700;\n  line-height: 1;\n  text-shadow: 0 1px 0 #fff;\n  opacity: 0.5;\n`;\n\nconst SearchFilter: React.FC<SearchFilterProps> = ({\n  recipeType,\n  recipeTypeOptions,\n  handleRecipeTypeChange,\n  recipeNameSearch,\n  handleRecipeNameSearchChange,\n  handleClear\n}) => {\n  const selectedRecipeType = recipeType || 'All';\n  const [typeDropdownIsOpen, setTypeDropdownIsOpen] = useState(false);\n  const toggleTypeDropdown = (): void =>\n    setTypeDropdownIsOpen(!typeDropdownIsOpen);\n\n  return (\n    <InputGroup>\n      <InputGroupButtonDropdown\n        addonType=\"prepend\"\n        isOpen={typeDropdownIsOpen}\n        toggle={toggleTypeDropdown}\n      >\n        <DropdownToggle\n          aria-label={`filter recipe type ${selectedRecipeType}`}\n          color=\"primary\"\n          outline\n          caret\n        >\n          {selectedRecipeType}\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem\n            active={recipeType === null}\n            onClick={(): void => handleRecipeTypeChange(null)}\n          >\n            All\n          </DropdownItem>\n          {recipeTypeOptions.map(({ value, active, disabled }) => (\n            <DropdownItem\n              key={value}\n              active={active}\n              disabled={disabled}\n              onClick={(): void => handleRecipeTypeChange(value)}\n            >\n              {value}\n            </DropdownItem>\n          ))}\n        </DropdownMenu>\n      </InputGroupButtonDropdown>\n      <Input\n        placeholder=\"search recipe names\"\n        className=\"text-center\"\n        value={recipeNameSearch || ''}\n        onChange={(event): void =>\n          handleRecipeNameSearchChange(event.currentTarget.value)\n        }\n        spellCheck={false}\n      />\n      <InputGroupAddon addonType=\"append\">\n        <Button\n          aria-label=\"clear filter and search\"\n          color=\"primary\"\n          outline\n          onClick={(): void => handleClear()}\n        >\n          <ClearIconWrapper aria-hidden=\"true\">×</ClearIconWrapper>\n        </Button>\n      </InputGroupAddon>\n    </InputGroup>\n  );\n};\n\nexport default SearchFilter;\n","import React, { useEffect, useState } from 'react';\nimport { Col, Container, Row } from 'reactstrap';\nimport styled from 'styled-components';\nimport api from '../api';\nimport { RecipesType } from '../types';\nimport { filterRecipes, getRecipeTypeOptions, sortRecipes } from '../utils';\nimport Counter from './Counter';\nimport Recipe from './Recipe';\nimport SearchFilter from './SearchFilter';\n\nconst SearchFilterCounterWrapper = styled.div`\n  margin-bottom: 16px;\n`;\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [recipes, setRecipes] = useState<RecipesType>([]);\n  const [recipeType, setRecipeType] = useState(null);\n  const [recipeNameSearch, setRecipeNameSearch] = useState(null);\n  const filters = {\n    recipeType,\n    recipeNameSearch\n  };\n  const recipeTypeOptions = getRecipeTypeOptions({\n    recipes,\n    filters,\n    currentValue: recipeType\n  });\n  const filteredRecipes = filterRecipes({ recipes, filters });\n\n  useEffect(() => {\n    const fetchRecipes = async (): Promise<void> => {\n      setError(null);\n      setLoading(true);\n\n      try {\n        const nextRecipes = await api.getRecipes();\n        setRecipes(sortRecipes(nextRecipes));\n      } catch (e) {\n        setError(e);\n      }\n      setLoading(false);\n    };\n\n    fetchRecipes();\n  }, []);\n\n  return (\n    <Container>\n      <Row>\n        <Col\n          xs={{ size: 12, offset: 0 }}\n          sm={{ size: 10, offset: 1 }}\n          md={{ size: 12, offset: 0 }}\n          lg={{ size: 8, offset: 2 }}\n          className=\"text-center\"\n        >\n          <h1 className=\"mt-3\">Recipes</h1>\n          {((): JSX.Element => {\n            if (loading) {\n              return <p className=\"text-muted\">Loading recipes...</p>;\n            }\n\n            if (error) {\n              return <p className=\"text-danger\">Error loading recipes!</p>;\n            }\n\n            if (recipes.length) {\n              return (\n                <>\n                  <SearchFilterCounterWrapper>\n                    <SearchFilter\n                      recipeType={recipeType}\n                      recipeTypeOptions={recipeTypeOptions}\n                      handleRecipeTypeChange={setRecipeType}\n                      recipeNameSearch={recipeNameSearch}\n                      handleRecipeNameSearchChange={setRecipeNameSearch}\n                      handleClear={(): void => {\n                        setRecipeType(null);\n                        setRecipeNameSearch(null);\n                      }}\n                    />\n                    <Counter count={filteredRecipes.length} />\n                  </SearchFilterCounterWrapper>\n                  {filteredRecipes.length ? (\n                    filteredRecipes.map(({ id, name, type, link }) => (\n                      <Recipe\n                        key={id}\n                        name={name}\n                        type={type}\n                        link={link}\n                        nameSearch={recipeNameSearch}\n                        showType={!recipeType}\n                      />\n                    ))\n                  ) : (\n                    <p>\n                      No <strong>{recipeType}</strong> recipes matching{' '}\n                      <strong>{recipeNameSearch}.</strong>\n                    </p>\n                  )}\n                </>\n              );\n            }\n\n            return (\n              <p role=\"alert\" aria-live=\"assertive\">\n                No recipes.\n              </p>\n            );\n          })()}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default App;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}